classDiagram
main..>user_service
main..>account_service
main..>Yaml
main..>Article
RecordQuery--|>Sqlite3Template
InsertQuery--|>Sqlite3Template
account_service..>Login
Login..>UseSqlite
user_service..>WordFreq
user_service..>pickle_idea2
user_service..>Article
user_service..>pickle_idea
user_service..>wordfreqCMD
difficulty..>wordfreqCMD
WordFreq..>wordfreqCMD
wordfreqCMD..>pickle_idea
Article..>difficulty
Article..>WordFreq
Article..>UseSqlite
Article..>wordfreqCMD
Article..>pickle_idea
  class main{
    +get_random_image(path)
+get_random_ads()
+appears_in_test(word,d)
+mark_word()
+mainpage()
  }
   class Sqlite3Template{
   +__init__(self, db_fname)
+connect(self, db_fname)
+instructions(self, query_statement)
+operate(self)
+format_results(self)
+do(self)
+instructions_with_parameters(self, query_statement, parameters)
+do_with_parameters(self)
+operate_with_parameters(self)
  }
   class WordFreq{
    +__init__(self, s)
+get_freq(self)
  }
   class InsertQuery{
    +instructions(self, query)
  }
   class RecordQuery{
    +instructions(self, query)
+format_results(self)
+get_results(self)
  }
   class pickle_idea2{
    +lst2dict(lst, d)
+deleteRecord(path,word)
+dict2lst(d)
+merge_frequency(lst1, lst2)
+load_record(pickle_fname)
+save_frequency_to_pickle(d, pickle_fname)
  }
   class difficulty{
    +load_record(pickle_fname)
+difficulty_level_from_frequency(word, d)
+get_difficulty_level(d1, d2)
+revert_dict(d)
+user_difficulty_level(d_user, d)
+text_difficulty_level(s, d)
  }
   class wordfreqCMD{
    +freq(fruit)
+youdao_link(s)
+file2str(fname)
+remove_punctuation(s)
+sort_in_descending_order(lst)
+sort_in_ascending_order(lst)
+make_html_page(lst, fname)
  }
   class pickle_idea{
    +lst2dict(lst, d)
+dict2lst(d)
+merge_frequency(lst1, lst2)
+load_record(pickle_fname)
+save_frequency_to_pickle(d, pickle_fname)
+unfamiliar(path,word)
+familiar(path,word)
  }
  class account_service{
    +signup()
+login()
+logout()
+reset()
  }
  class Yaml{
    
  }
  class Login{
    +verify_user(username, password)
+add_user(username, password)
+check_username_availability(username)
+change_password(username, old_password, new_password)
+get_expiry_date(username)
+md5(s)
  }
  class UseSqlite{
    
  }
  class Aticle{
    +total_number_of_essays()
+get_article_title(s)
+get_article_body(s)
+get_today_article(user_word_list, articleID)
+load_freq_history(path)
+within_range(x, y, r)
+get_question_part(s)
+get_answer_part(s)
  }