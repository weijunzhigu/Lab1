Lab 1  Dependency Analysis and Dependency Graphs
===================================





## Instroction

* 在给定软件源代码的情况下，用工具和方法找出模块/类/函数之间的依赖关系
* 分析EnglishPal（Beginingofspring）的依赖关系
* 分析EnglishPal（ColdDew）的依赖关系
* 比较上述两种架构，哪一个看起来更好
* 分析教科书第4章中订单行分配架构的依赖关系。

## Materials and Methods

* **Snakefood**：从python代码生成依赖项、筛选、集群和生成图 从依赖关系列表中。
* **Graphviz**：是一个由[AT&T](https://baike.baidu.com/item/AT%26T/15206829)实验室启动的开源工具包，用于绘制[DOT](https://baike.baidu.com/item/DOT/16002851)语言脚本描述的图形。
* **Mermaid**：是一个类似 markdown，用文本语法来描述文档图形 (流程图、 时序图、甘特图) 的工具。

Results
--------

### **EnglishPal(ColdDew)依赖分析：**

* 模块依赖(snakefood3)

```
# This file was generated by snakefood3.

 strict digraph "dependencies" {
  graph [
          rankdir="LR",
          overlap="scale",
          ratio="fill",
          fontsize="16",
          dpi="150",
          clusterrank="local"
      ]

     node [
          fontsize=14
          shape=ellipse
          fontname=Consolas
     ];
  "app.wordfreqCMD" -> "app.difficulty"
  "app.wordfreqCMD" -> "app.main"
  "app.UseSqlite" -> "app.main"
  "app.WordFreq" -> "app.main"
  "app.pickle_idea" -> "app.main"
  "app.pickle_idea2" -> "app.main"
  "app.difficulty" -> "app.main"
  "app.wordfreqCMD" -> "app.WordFreq"
  "app.pickle_idea" -> "app.wordfreqCMD"

 }

```



* 类图关系(mermaid)

```
classDiagram
main..>WordFreq
main..>InsertQuery
main..>RecordQuery
main..>pickle_idea2
main..>difficulty
main..>wordfreqCMD
main..>pickle_idea
RecordQuery--|>Sqlite3Template
InsertQuery--|>Sqlite3Template
difficulty..>wordfreqCMD
WordFreq..>wordfreqCMD
wordfreqCMD..>pickle_idea
  class main{
    +get_random_image(path)
+get_random_ads()
+total_number_of_essays()
+load_freq_history(path)
+verify_user(username, password)
+add_user(username, password)
+check_username_availability(username)
+get_expiry_date(username)
+within_range(x, y, r)
+get_article_title(s)
+get_article_body(s)
+get_today_article(user_word_list, articleID)
+appears_in_test(word, d)
+get_time()
+get_question_part(s)
+get_answer_part(s)
+get_flashed_messages_if_any()
+user_reset(username)
+mark_word()
+mainpage()
+user_mark_word(username)
+unfamiliar(username,word)
+familiar(username,word)
+deleteword(username,word)
+userpage(username)
+signup()
+login()
+logout()
  }
   class Sqlite3Template{
    +__init__(self, db_fname)
+connect(self, db_fname)
+instructions(self, query_statement)
+operate(self)
+format_results(self)
+do(self)
+instructions_with_parameters(self, query_statement, parameters)
+do_with_parameters(self)
+operate_with_parameters(self)
  }
   class WordFreq{
    +__init__(self, s)
+get_freq(self)
  }
   class InsertQuery{
    +instructions(self, query)
  }
   class RecordQuery{
    +instructions(self, query)
+format_results(self)
+get_results(self)
  }
   class pickle_idea2{
    +lst2dict(lst, d)
+deleteRecord(path,word)
+dict2lst(d)
+merge_frequency(lst1, lst2)
+load_record(pickle_fname)
+save_frequency_to_pickle(d, pickle_fname)
  }
   class difficulty{
    +load_record(pickle_fname)
+difficulty_level_from_frequency(word, d)
+get_difficulty_level(d1, d2)
+revert_dict(d)
+user_difficulty_level(d_user, d)
+text_difficulty_level(s, d)
  }
   class wordfreqCMD{
    +freq(fruit)
+youdao_link(s)
+file2str(fname)
+remove_punctuation(s)
+sort_in_descending_order(lst)
+sort_in_ascending_order(lst)
+make_html_page(lst, fname)
  }
   class pickle_idea{
    +lst2dict(lst, d)
+dict2lst(d)
+merge_frequency(lst1, lst2)
+load_record(pickle_fname)
+save_frequency_to_pickle(d, pickle_fname)
+unfamiliar(path,word)
+familiar(path,word)
  }
```



### **EnglishPal(BeginningOfSpring)依赖分析：**

* 模块依赖(snakefood3)

```
# This file was generated by snakefood3.

strict digraph "dependencies" {
graph [
    rankdir="LR",
    overlap="scale",
    ratio="fill",
    fontsize="16",
    dpi="150",
    clusterrank="local"
  ]

 node [
    fontsize=14
    shape=ellipse
    fontname=Consolas
 ];
"app.Login" -> "app.account_service"
"app.difficulty" -> "app.Article"
"app.pickle_idea" -> "app.Article"
"app.pickle_idea2" -> "app.Article"
"app.wordfreqCMD" -> "app.Article"
"app.WordFreq" -> "app.Article"
"app.UseSqlite" -> "app.Article"
"app.wordfreqCMD" -> "app.difficulty"
"app.UseSqlite" -> "app.Login"
"app.user_service" -> "app.main"
"app.Login" -> "app.main"
"app.account_service" -> "app.main"
"app.Yaml" -> "app.main"
"app.Article" -> "app.main"
"app.pickle_idea" -> "app.user_service"
"app.pickle_idea2" -> "app.user_service"
"app.wordfreqCMD" -> "app.user_service"
"app.WordFreq" -> "app.user_service"
"app.Article" -> "app.user_service"
"app.wordfreqCMD" -> "app.WordFreq"
"app.pickle_idea" -> "app.wordfreqCMD"
}

```

* 类图关系(mermaid)

```
classDiagram
main..>user_service
main..>account_service
main..>Yaml
main..>Article
RecordQuery--|>Sqlite3Template
InsertQuery--|>Sqlite3Template
account_service..>Login
Login..>UseSqlite
user_service..>WordFreq
user_service..>pickle_idea2
user_service..>Article
user_service..>pickle_idea
user_service..>wordfreqCMD
difficulty..>wordfreqCMD
WordFreq..>wordfreqCMD
wordfreqCMD..>pickle_idea
Article..>difficulty
Article..>WordFreq
Article..>UseSqlite
Article..>wordfreqCMD
Article..>pickle_idea
  class main{
    +get_random_image(path)
+get_random_ads()
+appears_in_test(word,d)
+mark_word()
+mainpage()
  }
   class Sqlite3Template{
   +__init__(self, db_fname)
+connect(self, db_fname)
+instructions(self, query_statement)
+operate(self)
+format_results(self)
+do(self)
+instructions_with_parameters(self, query_statement, parameters)
+do_with_parameters(self)
+operate_with_parameters(self)
  }
   class WordFreq{
    +__init__(self, s)
+get_freq(self)
  }
   class InsertQuery{
    +instructions(self, query)
  }
   class RecordQuery{
    +instructions(self, query)
+format_results(self)
+get_results(self)
  }
   class pickle_idea2{
    +lst2dict(lst, d)
+deleteRecord(path,word)
+dict2lst(d)
+merge_frequency(lst1, lst2)
+load_record(pickle_fname)
+save_frequency_to_pickle(d, pickle_fname)
  }
   class difficulty{
    +load_record(pickle_fname)
+difficulty_level_from_frequency(word, d)
+get_difficulty_level(d1, d2)
+revert_dict(d)
+user_difficulty_level(d_user, d)
+text_difficulty_level(s, d)
  }
   class wordfreqCMD{
    +freq(fruit)
+youdao_link(s)
+file2str(fname)
+remove_punctuation(s)
+sort_in_descending_order(lst)
+sort_in_ascending_order(lst)
+make_html_page(lst, fname)
  }
   class pickle_idea{
    +lst2dict(lst, d)
+dict2lst(d)
+merge_frequency(lst1, lst2)
+load_record(pickle_fname)
+save_frequency_to_pickle(d, pickle_fname)
+unfamiliar(path,word)
+familiar(path,word)
  }
  class account_service{
    +signup()
+login()
+logout()
+reset()
  }
  class Yaml{
    
  }
  class Login{
    +verify_user(username, password)
+add_user(username, password)
+check_username_availability(username)
+change_password(username, old_password, new_password)
+get_expiry_date(username)
+md5(s)
  }
  class UseSqlite{
    
  }
  class Aticle{
    +total_number_of_essays()
+get_article_title(s)
+get_article_body(s)
+get_today_article(user_word_list, articleID)
+load_freq_history(path)
+within_range(x, y, r)
+get_question_part(s)
+get_answer_part(s)
  }
```

### The order line allocation’s architecture in Chapter 4 依赖分析

* 模块依赖(snakefood3)

```
# This file was generated by snakefood3.

strict digraph "dependencies" {
  graph [
          rankdir="LR",
          overlap="scale",
          ratio="fill",
          fontsize="16",
          dpi="150",
          clusterrank="local"
      ]

     node [
          fontsize=14
          shape=ellipse
          fontname=Consolas
     ];
  "repository" -> "flask_app"
  "services" -> "flask_app"
  "orm" -> "flask_app"
  "model" -> "flask_app"
  "config" -> "flask_app"
  "model" -> "orm"
  "model" -> "repository"
  "model" -> "services"
  "repository" -> "services"
 }

```

* 类图关系(mermaid)

```
classDiagram
   
    services..>model
    services..>AbstractRepository
    services..>OrderLine
    SqlAlchemyRepository--*AbstractRepository
    model..>OutOfStock
    model..>OrderLine
    model..>Batch
    orm..>OrderLine
    orm..>Batch
    AbstractRepository..>Batch
    Batch..>OrderLine
    flask_app..>OrderLine
    flask_app..>InvalidSku
    flask_app..>config
    flask_app..>services
    flask_app..>SqlAlchemyRepository
    flask_app..>orm
    flask_app..>OutOfStock

    class OrderLine{
      +str:orderid
      +str:sku
      +int:qty
    }
    class Batch{
      +str:reference
      +str:sku
      -int:purchased_quantity
      +Optional[date]:eta
      -allocations:Set[OrderLine]
      __repr__(self)
      __eq__(self, other)
__hash__(self)
__gt__(self, other)
+allocate(self, line: OrderLine)
+deallocate_one(self)
+allocated_quantity(self)
+available_quantity(self)
+can_allocate(self, line: OrderLine)
    }
    class AbstractRepository{
      +add(self, batch: model.Batch)
      +get(self, reference)
    }
    class orm{
      +start_mappers()
    }
    class SqlAlchemyRepository{
      +session
+add(self, batch)
+get(self, reference)
+list(self)
    }
    class services{
      +is_valid_sku(sku, batches)
      +allocate(line: OrderLine, repo: AbstractRepository, session)
    }
    class model{
      +allocate(line: OrderLine, batches: List[Batch])
    }
    class OutOfStock{

    }
    class InvalidSku{

    }
    class config{
      +get_postgres_uri()
      +get_api_url()
    }
    class flask_app{
      +allocate_endpoint()
    }
    
            
```

### Discusion

* Comparing five aspects between the two versions of EnglishPal, ColdDew and BeginningOfSpring

|                                                         | **ColdDew** | **BeginningOfSpring** |
| ------------------------------------------------------- | ----------- | --------------------- |
| Lines of code in main.py (excluding blank lines)        | 431         | 56                    |
| Number of HTML files in folder templates                | 3           | 10                    |
| Has a service layer? Answer Yes or No.                  | No          | Yes                   |
| Front-end and back-end coupling. Answer Strong or Weak. | Strong      | Weak                  |

* From a scale 1 (worst) to scale 5 (best), how would you evaluate the architectural health of each version of EnglishPal?Which version of EnglishPal is easier to understand and maintain? Explain in no more than 3 sentences.
* Pros and cons of the current architecture of EnglishPal, BeginningOfSpring.

## References




